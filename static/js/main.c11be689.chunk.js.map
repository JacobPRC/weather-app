{"version":3,"sources":["components/Search.js","components/Header.js","components/CurrentWeather.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","Header","props","CurrentWeather","myElement","myTween","state","data","cityName","this","city","tl","TimelineMax","repeat","to","backgroundPosition","ease","Linear","easeNone","fetch","then","response","json","setState","console","log","catch","err","prevProps","prevState","iconCode","weather","icon","name","country","sys","description","ref","div","className","id","src","Math","round","main","temp","feels_like","charAt","toUpperCase","slice","temp_max","temp_min","pressure","humidity","wind","speed","home","type","App","searchHandler","currentWeatherType","path","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c11be689.chunk.js","sourcesContent":["import React from \"react\";\r\nclass Search extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cityLocation: \"\",\r\n    };\r\n  }\r\n  searchHandler = (e) => {\r\n    e.preventDefault();\r\n    this.props.searchHandler(this.state.cityLocation);\r\n    e.target.reset();\r\n  };\r\n  changeHandler = (e) => {\r\n    const cityLocation = e.target.value;\r\n    this.setState({ cityLocation });\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.searchHandler} className=\"form-inline my-2 my-lg-0\">\r\n        <input\r\n          onChange={this.changeHandler}\r\n          className=\"form-control mr-sm-2\"\r\n          type=\"search\"\r\n          placeholder=\"Search location, zip...\"\r\n          aria-label=\"Search\"\r\n        />\r\n        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">\r\n          Search\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport Search from \"./Search\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nconst Header = (props) => (\r\n  // <Router>\r\n  <header>\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      <Link to=\"/\" className=\"navbar-brand\">\r\n        Weather App\r\n      </Link>\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarSupportedContent\"\r\n        aria-controls=\"navbarSupportedContent\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"nav-item\">\r\n            <Link to=\"/current-weather\" className=\"nav-link\">\r\n              Current Weather\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n        <Search searchHandler={props.searchHandler} />\r\n      </div>\r\n    </nav>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./CurrentW.css\";\r\nimport OpenWeatherMap from \"react-open-weather-map\";\r\nimport { TweenMax, Power2, TimelineMax, TweenLite, Linear } from \"gsap\";\r\n\r\nclass CurrentWeather extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.myElement = null;\r\n    this.myTween = null;\r\n    this.state = {\r\n      data: null,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const key = \"ba9d5371a355cdeb9f7c396fe6d5a83d\";\r\n    const cityName = this.props.city;\r\n    const tl = new TimelineMax({ repeat: -1 });\r\n    this.myTween = tl.to(this.myElement, 30, {\r\n      backgroundPosition: \"-2247px 0px\",\r\n      ease: Linear.easeNone,\r\n    });\r\n\r\n    fetch(\r\n      \"https://api.openweathermap.org/data/2.5/weather?q=\" +\r\n        cityName +\r\n        \"&appid=\" +\r\n        key +\r\n        \"&units=metric\"\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => this.setState({ data }, () => console.log(data)))\r\n      .catch((err) => console.log(err));\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const key = \"ba9d5371a355cdeb9f7c396fe6d5a83d\";\r\n    const cityName = this.props.city;\r\n    if (prevState.data === this.state.data) {\r\n      console.log(\"updated\");\r\n      fetch(\r\n        \"https://api.openweathermap.org/data/2.5/weather?q=\" +\r\n          cityName +\r\n          \"&appid=\" +\r\n          key +\r\n          \"&units=metric\"\r\n      )\r\n        .then((response) => response.json())\r\n        .then((data) => this.setState({ data }, () => console.log(data)))\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }\r\n  render() {\r\n    const iconCode = this.state.data ? this.state.data.weather[0].icon : \"\";\r\n    const cityName = this.state.data ? this.state.data.name : \"\";\r\n    const country = this.state.data ? this.state.data.sys.country : \"\";\r\n    const description = this.state.data\r\n      ? this.state.data.weather[0].description\r\n      : \"\";\r\n    return (\r\n      <body>\r\n        <div ref={(div) => (this.myElement = div)} className=\"current-weather\">\r\n          <content>\r\n            <div className=\"row m-6\">\r\n              <div id=\"weather-box\" className=\"col-sm-7\">\r\n                <div className=\"card-curr\">\r\n                  <div className=\"card-body-curr\">\r\n                    <div className=\"one\">\r\n                      <h5 className=\"card-title\">\r\n                        Weather in {cityName}, {country}\r\n                      </h5>\r\n                    </div>\r\n\r\n                    <div className=\"two\">\r\n                      <div className=\"temp\">\r\n                        <img\r\n                          src={`http://openweathermap.org/img/w/${iconCode}.png`}\r\n                        />\r\n                        <p className=\"card-text-temp\">\r\n                          {this.state.data\r\n                            ? Math.round(this.state.data.main.temp)\r\n                            : \"\"}\r\n                          °C\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"desc\">\r\n                        <p className=\"card-text\">\r\n                          <b>Feels like:</b>{\" \"}\r\n                          {this.state.data\r\n                            ? Math.round(this.state.data.main.feels_like)\r\n                            : \"\"}\r\n                          °C\r\n                        </p>\r\n                        <p className=\"card-text-desc\">\r\n                          <i>\r\n                            {description.charAt(0).toUpperCase() +\r\n                              description.slice(1)}\r\n                          </i>{\" \"}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"max-min\">\r\n                      <div className=\"max\">\r\n                        <p className=\"card-text\">\r\n                          Max Temp:{\" \"}\r\n                          {this.state.data\r\n                            ? Math.round(this.state.data.main.temp_max)\r\n                            : \"\"}\r\n                          °C\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"min\">\r\n                        <p className=\"card-text\">\r\n                          Min Temp:{\" \"}\r\n                          {this.state.data ? this.state.data.main.temp_min : \"\"}\r\n                          °C\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"extras\">\r\n                      <p className=\"card-text\">\r\n                        Pressure:{\" \"}\r\n                        {this.state.data\r\n                          ? Math.round(this.state.data.main.pressure)\r\n                          : \"\"}{\" \"}\r\n                        mmHg\r\n                      </p>\r\n                      <p className=\"card-text\">\r\n                        Humidity:{\" \"}\r\n                        {this.state.data ? this.state.data.main.humidity : \"\"}%\r\n                      </p>\r\n                      <p className=\"card-text\">\r\n                        Wind speed:{\" \"}\r\n                        {this.state.data ? this.state.data.wind.speed : \"\"} m/s\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </content>\r\n        </div>\r\n      </body>\r\n    );\r\n  }\r\n}\r\nexport default CurrentWeather;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nconst home = () => (\r\n  <div className=\"home-design\">\r\n    <div className=\"home\">\r\n      <h1>The Weather App</h1>\r\n      <Link to=\"/current-weather\" className=\"nav-link\">\r\n        <button type=\"button\" className=\"btn btn-primary btn-lg\">\r\n          Check the current weather\r\n        </button>\r\n      </Link>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default home;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\nimport Header from \"./components/Header\";\nimport CurrentWeather from \"./components/CurrentWeather\";\nimport Home from \"./components/Home\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n// make router work on app js and make it home page? And render 5 day + continut css\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentWeatherType: \"Current Weather\",\n      city: \"Perth\",\n    };\n  }\n  searchHandler = (city) => {\n    this.setState({ city });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Header searchHandler={this.searchHandler} />\n          <Switch>\n            <Route path=\"/current-weather\">\n              <CurrentWeather city={this.state.city} />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}